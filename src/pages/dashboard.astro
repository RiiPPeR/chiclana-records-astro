---
import { record } from "astro:schema";
import RecordCardTsx from "../components/RecordCardTsx";
import Layout from "../layouts/Layout.astro"
import { RecordService } from "../lib/models/record"
import type { User } from "../lib/models/types/types"
import { supabase } from "../lib/supabase"
import type { Record } from './../lib/models/types/types';
import { logger } from "./api/logger";

const { cookies, redirect } = Astro

const accessToken = cookies.get("sb-access-token")
const refreshToken = cookies.get("sb-refresh-token")
const userCookie = cookies.get("user")

if (!accessToken || !refreshToken) {
    return redirect("/signin")
}

const user: User = userCookie ? JSON.parse(userCookie.value) : null
if (!user) {
    cookies.delete("sb-access-token", { path: "/" })
    cookies.delete("sb-refresh-token", { path: "/" })
    return redirect("/signin")
}

let session
try {
    session = await supabase.auth.setSession({
        refresh_token: refreshToken.value,
        access_token: accessToken.value,
    })
    if (session.error) {
        cookies.delete("sb-access-token", { path: "/" })
        cookies.delete("sb-refresh-token", { path: "/" })
        cookies.delete("user", { path: "/" })
        return redirect("/signin")
    }
} catch (error) {
    cookies.delete("sb-access-token", { path: "/" })
    cookies.delete("sb-refresh-token", { path: "/" })
    cookies.delete("user", { path: "/" })
    return redirect("/signin")
}
const recordService = new RecordService();

const userId = session.data.user?.id;

const records: Record[] = userId ? await recordService.getUserRecords(userId) : [];

records.forEach(record => {
    logger.info('Record fetched', { record })
});
---
<Layout title="Colección">
    <div id="container">
        <div class="flex flex-col">
            <section class="flex flex-row text-center mb-12 p-6 bg-black/30 backdrop-blur-sm rounded-xl max-w-3xl mx-auto">
                <div class="self-center">
                    <h1 class="text-4xl font-bold text-yellow-500 mb-4">Tu coleccón de discos</h1>
                    <p class="text-gray-300 mb-6">
                        Aquí puedes ver todos los discos que has añadido a tu colección
                    </p>
                </div>

                <div class="hover:-translate-y-2 group bg-transparent duration-500 w-44 h-44 flex text-neutral-600 flex-col justify-center items-center relative rounded-xl overflow-hidden">
                    <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg" class="absolute blur z-10 fill-yellow-500 duration-500 group-hover:blur-none group-hover:scale-105">
                        <path transform="translate(100 100)" d="M39.5,-49.6C54.8,-43.2,73.2,-36.5,78.2,-24.6C83.2,-12.7,74.8,4.4,69,22.5C63.3,40.6,60.2,59.6,49.1,64.8C38.1,70,19,61.5,0.6,60.7C-17.9,59.9,-35.9,67,-47.2,61.9C-58.6,56.7,-63.4,39.5,-70,22.1C-76.6,4.7,-84.9,-12.8,-81.9,-28.1C-79,-43.3,-64.6,-56.3,-49.1,-62.5C-33.6,-68.8,-16.8,-68.3,-2.3,-65.1C12.1,-61.9,24.2,-55.9,39.5,-49.6Z"></path>
                    </svg>
                    <div class="z-20 flex flex-col justify-center items-center">
                        <span class="font-bold text-6xl ml-2">{records.length}</span>
                        <p class="font-bold">Discos</p>
                    </div>
                </div>
            </section>

            <div class="mb-10 w-96 self-center">
                <label class="block text-2xl font-medium text-yellow-500" for="filter"
                >Buscar</label
                >
                <input
                    class="mt-1 p-2 w-full bg-white bg-transparent backdrop-blur-md bg-opacity-10 rounded-md text-white shadow-inner shadow-black"
                    name="filter" id="filter" type="text"
                />
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 lg:mx-24">
                {records.map((record: Record) => (
                    <div class="record-wrapper transition-all duration-500 ease-in-out opacity-100">
                        <RecordCardTsx client:load record={record} records={records} user_id={user.id} />
                    </div>
                ))}
            </div>
        </div>
    </div>

    <script>
        function initializeFilter() {
            const filterInput = document.getElementById('filter') as HTMLInputElement
            if (!filterInput) {
                return
            }
        
            const clone = filterInput.cloneNode(true)
            filterInput.parentNode?.replaceChild(clone, filterInput)
            
            clone.addEventListener('input', (e) => {
                const target = e.target as HTMLInputElement
                const searchTerm = target.value.toLowerCase()
                const recordWrappers = document.querySelectorAll('.record-wrapper')
                
                recordWrappers.forEach(wrapper => {
                    const htmlWrapper = wrapper as HTMLElement
                    const card = htmlWrapper.querySelector('.record-card') as HTMLElement
                    const artist = card.querySelector('.artist')?.textContent?.toLowerCase() ?? ''
                    const title = card.querySelector('.title')?.textContent?.toLowerCase().replace('- ', '') ?? ''
                
                    if (artist.includes(searchTerm) || title.includes(searchTerm)) {
                        htmlWrapper.style.display = 'block'
                        void htmlWrapper.offsetHeight
                        htmlWrapper.style.opacity = '1'
                    } else {
                        htmlWrapper.style.opacity = '0'
                        setTimeout(() => {
                            if (htmlWrapper.style.opacity === '0') {
                            htmlWrapper.style.display = 'none'
                            }
                        }, 500)
                    }
                })
            })
        }
        
        /* 
            astro:page-load
            An event that fires at the end of page navigation, after the new page is visible to the user and blocking styles and scripts are loaded. You can listen to this event on the document.

            The <ViewTransitions /> component fires this event both on initial page navigation for a pre-rendered page and on any subsequent navigation, either forwards or backwards.

            You can use this event to run code on every page navigation, for example to set up event listeners that would otherwise be lost during navigation.
        */
        document.addEventListener('astro:page-load', () => {
            initializeFilter()
        })
    </script>
</Layout>
